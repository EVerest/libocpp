{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "description": "Json schema for internal config",
    "type": "object",
    "required": [
        "ChargePointId",
        "CentralSystemURI",
        "ChargeBoxSerialNumber",
        "ChargePointModel",
        "ChargePointVendor",
        "FirmwareVersion"
    ],
    "properties": {
        "ChargePointId": {
            "type": "string",
            "readOnly": true,
            "minLength": 1
        },
        "CentralSystemURI": {
            "type": "string",
            "readOnly": true,
            "minLength": 1
        },
        "ChargeBoxSerialNumber": {
            "type": "string",
            "readOnly": true,
            "minLength": 1,
            "maxLength": 25
        },
        "ChargePointModel": {
            "type": "string",
            "readOnly": true,
            "minLength": 1,
            "maxLength": 20
        },
        "ChargePointSerialNumber": {
            "type": "string",
            "readOnly": true,
            "minLength": 1,
            "maxLength": 25
        },
        "ChargePointVendor": {
            "type": "string",
            "readOnly": true,
            "minLength": 1,
            "maxLength": 20
        },
        "FirmwareVersion": {
            "type": "string",
            "readOnly": true,
            "minLength": 1,
            "maxLength": 50
        },
        "ICCID": {
            "type": "string",
            "readOnly": true,
            "minLength": 1,
            "maxLength": 20
        },
        "HostName": {
	     "type": "string",
             "readOnly": true,
             "minLength": 1
        },
        "IMSI": {
            "type": "string",
            "readOnly": true,
            "minLength": 1,
            "maxLength": 20
        },
        "MeterSerialNumber": {
            "type": "string",
            "readOnly": true,
            "minLength": 1,
            "maxLength": 25
        },
        "MeterType": {
            "type": "string",
            "readOnly": true,
            "minLength": 1,
            "maxLength": 25
        },
        "SupportedCiphers12": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "readOnly": true,
            "default": [
                "ECDHE-ECDSA-AES128-GCM-SHA256",
                "ECDHE-ECDSA-AES256-GCM-SHA384",
                "AES128-GCM-SHA256",
                "AES256-GCM-SHA384"
            ]
        },
        "SupportedCiphers13": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "readOnly": true,
            "default": [
                "TLS_AES_256_GCM_SHA384",
                "TLS_AES_128_GCM_SHA256"
            ]
        },
        "UseTPM": {
            "type": "boolean",
            "readOnly": true,
            "default": false
        },
        "RetryBackoffRandomRange": {
            "$comment": "maximum value for the random part of the websocket reconnect back-off time",
            "type": "integer",
            "readOnly": false,
            "default": 10
        },
        "RetryBackoffRepeatTimes": {
            "$comment": "amount of times previous reconnect back-off time will be doubled",
            "type": "integer",
            "readOnly": false,
            "default": 3
        },
        "RetryBackoffWaitMinimum": {
            "$comment": "minimum back-off time of the first reconnect",
            "type": "integer",
            "readOnly": false,
            "default": 3
        },
        "AuthorizeConnectorZeroOnConnectorOne": {
            "$comment": "Automatically authorize id tags on connector 1 when there is only one connector",
            "type": "boolean",
            "readOnly": true,
            "default": true
        },
        "LogMessages": {
            "$comment": "Automatically log all sent and received messages to a temporary file at /tmp/libocpp_messages_<LIBOCPP_START_TIMESTAMP>.txt",
            "type": "boolean",
            "readOnly": true,
            "default": true
        },
        "LogMessagesFormat": {
            "$comment": "Supported log formats are console, log, html, console_detailed, session_logging, callback and security. \"security\" logs security events into a seperate logfile",
            "type": "array",
            "items": {
                "type": "string"
            },
            "readOnly": true,
            "default": [
                "log",
                "html",
                "session_logging",
                "security"
            ]
        },
        "SupportedChargingProfilePurposeTypes": {
            "$comment": "Indicates which ChargingProfilePurposeTypes are supported. SetChargingProfile.req for profiles not listed will be rejected.",
            "type": "array",
            "items": {
                "type": "string"
            },
            "readOnly": true,
            "default": [
                "ChargePointMaxProfile",
                "TxDefaultProfile",
                "TxProfile"
            ]
        },
        "MaxCompositeScheduleDuration": {
            "$comment": "Maximum duration in seconds of GetCompositeSchedule.req. For GetCompositeSchedule.req with a greater duration the schedule for only the MaxCompositeScheduleDuration will be calculated",
            "type": "integer",
            "readOnly": true,
            "default": 31536000
        },
        "WebsocketPingPayload": {
            "$comment": "The payload sent in a websocket ping.",
            "type": "string",
            "readOnly": true,
            "default": "hello there"
        },
        "WebsocketPongTimeout": {
            "$comment": "Maximum timeout for receiving a pong message in seconds",
            "type": "integer",
            "readOnly": true,
            "default": 5
        },
        "UseSslDefaultVerifyPaths": {
            "$comment": "Use default verify paths for validating CSMS server certificate",
            "type": "boolean",
            "readOnly": true,
            "default": true
        },
        "VerifyCsmsCommonName": {
            "$comment": "Verify that the CSMS certificates commonName matches the CSMS FQDN",
            "type": "boolean",
            "readOnly": true,
            "default": true
        },
        "OcspRequestInterval": {
            "$comment": "Interval in seconds used to request OCSP revocation status information on the CSO Sub-CA certificates",
            "type": "integer",
            "readOnly": false,
            "default": 604800,
            "minimum": 86400
        },
        "SeccLeafSubjectCommonName": {
            "$comment": "Common Name(s) of the SECC (EVSE) leaf certificate(s). The CN must be a SECCID. The field can contain optional multiple SECCIDs if necessary.",
            "type": "string",
            "readOnly": false
        },
        "SeccLeafSubjectCountry": {
            "$comment": "County of the SECC (EVSE) leaf certificate. Indicates in which country the CPO operates.",
            "type": "string",
            "readOnly": false
        },
        "SeccLeafSubjectOrganization": {
            "$comment": "Organization of the SECC (EVSE) leaf certificate. Indicates which CPO operates this EVSE. Example: Hubject GmbH",
            "type": "string",
            "readOnly": false
        },
        "ConnectorEvseIds": {
            "$comment": "Comma separated EVSEIDs for OCPP connectors starting with connector 1 in one string.",
            "type": "string",
            "readOnly": false
        },
        "AllowChargingProfileWithoutStartSchedule": {
            "$comment": "OCPP1.6 specifies that for certain ChargingProfiles the startSchedule field needs to be set. This flag ignores this requirement and will accept those profiles without startSchedule, assuming startSchedule is now.",
            "type": "boolean",
            "readOnly": false
        },
        "WaitForStopTransactionsOnResetTimeout": {
            "$comment": "Specifies the timeout that is used when transactions are stopped because of a Reset.req . If timeout exceeds, the reset callback is executed even if StopTransaction.conf messages not yet received for transactions that have been active.",
            "type": "integer",
            "readOnly": false,
            "minimum": 0,
            "default": 60
        },
        "QueueAllMessages": {
            "$comment": "If set to true, also non-transactional messages are queued in memory in case they cannot be sent immediately.",
            "type": "boolean",
            "readOnly": true
        },
        "MessageQueueSizeThreshold": {
            "$comment": "Threshold for the size of in-memory message queues used to buffer messages (and store e.g. while offline). If threshold is exceeded, messages  will be dropped according to OCPP specification to avoid memory issues.",
            "type": "integer",
            "readOnly": true,
            "minimum": 1
        }
    },
    "additionalProperties": false
}
