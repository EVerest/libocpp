@startuml
'https://plantuml.com/sequence-diagram
!pragma teoz true
participant csms
autonumber "<b><font color=red>"
skinparam sequenceArrowThickness 2

== libocpp wants to connect to network connection profile ==

{start} libocpp -> core: std::future<ConfigNetworkResult>(configure_network_connection_profile_callback(\nconfiguration_slot, NetworkConnectionProfile))
activate core #DarkSalmon
core -> core: Setup network, e.g. setup modem
{end} core -> libocpp: promise.set_value(status,\nip_address, etc)

deactivate core
{start} <-> {end}: ... possible delay ...

alt within timeout

    ' core -> libocpp: on_network_update (ip address)
    libocpp -> csms: connect websocket (ip address)
    csms -> libocpp: ACK
    libocpp -> core: websocket_connected_callback(configuration_slot, NetworkConnectionProfile)
    core -> core: disable unneeded interfaces, \ne.g. disable modem
else timeout reached, next network connection profile selected
    libocpp --> core: std::future<ConfigNetworkResult>(configure_network_connection_profile_callback(\nconfiguration_slot, NetworkConnectionProfile)) (see 1)
end


== CSMS is connected via connection profile prio 2 (for example modem) but prio 1 (for example eth0) comes up ==

loop until prio 1 csms is found
    core -> csms: ping
end

core -> libocpp: on_try_switch_networkconnectionprofile(configuration_slot)
libocpp --> core: std::future<ConfigNetworkResult>(configure_network_connection_profile_callback(\nconfiguration_slot, NetworkConnectionProfile)) (see 1)


== Network is disconnected (for example networkcable removed) ==

core -> libocpp: disconnect csms (on_network_disconnected(configuration_slot, OCPPInterfaceEnum)
libocpp -> core: websocket_disconnected_callback(configuration_slot, NetworkConnectionProfile)
libocpp --> core: std::future<ConfigNetworkResult>(configure_network_connection_profile_callback(\nconfiguration_slot, NetworkConnectionProfile)) (see 1)


== Network is disconnected (websocket timeout) ==

libocpp -> libocpp: disconnect csms
libocpp -> core: websocket_disconnected_callback(configuration_slot, NetworkConnectionProfile)
libocpp --> core: std::future<ConfigNetworkResult>(configure_network_connection_profile_callback(\nconfiguration_slot, NetworkConnectionProfile)) (see 1)


@enduml